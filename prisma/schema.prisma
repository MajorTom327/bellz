// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts     Account[]
  profile      Profile?
  Subscription Subscription[]
  loans        Loan[]
  teams        Team[]
  ownedTeam    Team[]         @relation("TeamMembers")
}

model Profile {
  id String @id @default(uuid())

  objective Int    @default(0)
  currency  String @default("EUR")

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id       String @id @default(uuid())
  name     String
  balance  Int
  type     String
  currency String @default("EUR")

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  transactions  Transaction[]
  subscriptions Subscription[]
  teams         Team[]
}

model Transaction {
  id String @id @default(uuid())

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  amount      Int
  description String
  date        DateTime

  loanId String?
  loan   Loan?   @relation(fields: [loanId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id String @id @default(uuid())

  name   String
  amount Int
  active Boolean @default(true)

  occurence     String
  lastExecution DateTime?
  nextExecution DateTime?

  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loan {
  id       String @id @default(uuid())
  label    String
  amount   Int
  refunded Int    @default(0)

  currency String @default("EUR")

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Transaction Transaction[]
}

model Team {
  id   String @id @default(uuid())
  name String

  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  members User[] @relation("TeamMembers")

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  invitations Invitation[]
  accounts    Account[]
}

model Invitation {
  id String @id @default(uuid())

  email String
  token String @unique

  expiresAt DateTime @default(dbgenerated("NOW() + interval '7 day'"))

  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
